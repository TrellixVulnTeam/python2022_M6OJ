Numération dans différentes bases
Numération de position

Compter en base 3

0, 1, 2, 10, 11, 12, 20, 21, 22, 100, 101, 102...

Compte en base 7
0, 1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14 ,15, 16, 20, 21 

Compter en base 2 (binaire)
0, 1, 10, 11, 100, 101, 110, 111
0  1   2   3   4    5    6    7

Base 8 (octal)
0, 1, 2, 3, 4, 5 ,6, 7, 10, 11, 12 ,13 ...

Base 16 (Hexadecimal)
0, 1, 2, 3, 4, 5 , 6, 7 , 8 , 9 , A, B, C , D , E , F


1A  = 1* 16**1 + A * 16**0


En base 10
123 = 1* 10**2 + 2* 10**1 + 3* 10**0

En base 16
123 = 1 * 16**2 + 2* 16**1 + 3* 16**0
	= 1 * 256   + 2* 16    +  3*1
	= 291
	
10 = 1*8 + 1*2
   = 1*2**3 + 0*2**2 +1*2**1 + 0*2**0
en binaire  10 = 1010

7 = 0111 = 0*2**3 +1*2**2 + 1*2**1+ 1*2**0

10+7
	1010
	0111
	____
   10001= 1*2**4 +0*2**3 + 0*2**2 + 0*2**1 +1 *2**0
        = 16 + 1
		= 17 

   ET 0  1
   0  0  0
   1  0  1

   OU 0  1
   0  0  1
   1  1  1

   XOR 0  1
   0   0  1
   1   1  0
   
       bit de signe
	   |
       v
 +4	   00000100
 -4    10000100
 
 +0	   00000000    Deux représentations pour 0
 -0	   10000000
 
 3	   00000011	 	L'addition donne un resultat faux
 -5	   10000101
 -8	   10001000


 -5	   10000101 	changer les 1 en 0 et inversement sauf pour le signe
 -5	   11111010   	complément à 1
 -5	   11111011		complément à 2 : j'ai ajouté 1 au complément à 1
 
  3	   00000011	 	
 -5	   11111011
       11111110 	C'est un nombre <0 donc il est représenté en code
					complément à 2
	   11111101		complément à 1 : retirer 1 au complément à 2
 -2	   10000010		changer les 1 en 0 et reciproquement sauf signe
 
					Le résultat de l'addition est devenu juste !